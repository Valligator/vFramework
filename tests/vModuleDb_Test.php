<?php

include_once("../models/vRoot.php");

ctg_phpunit_helper::setup_test_db_connection();
 
define("HAPPY_STR", '\'"\')(][\'"\'&Ā,ĐĘĶŃÓŚŰāđęķńóśűĂĎĚĹŅŒŠŲăěĺņœšųĄĒĻŇŕŢŸąēĢļňŖţŹĆĕģĽdŌŗźćĖĪľōŘťŻČėīŐřżčĮŁőŞŽįłőŞŽįłőŞŽįłşž\'"\')(][\'"\'&ĀĐĘĶŃÓŚŰāđęķńóśűĂĎĚĹŅŒŠŲăěĺņœšųĄĒĻŇŕŢŸąēĢļňŖţŹĆĕģĽdŌŗźćĖĪľōŘťŻČėīŐřżčĮŁőŞŽįłőŞŽįłőŞŽįłşž');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-05-10 at 16:02:30.
 */
class vModuleDb_Test extends PHPUnit_Framework_TestCase {

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 * 
	 * Assumes the test database was already created by installHelper::install($un, $pw, vDb::getTestDbName());
	 */
	protected function setUp() {
		//use test db - otherwise tests will run on the frameworks normal database
		vDb::loadTestDb();
		//$this->object = new ctg_run_checklist_item;
		print_ln(__METHOD__." starting.");
		$this->clean_up_db();
		$this->clear_session(); //clear session each run
		print_ln(__METHOD__." complete.");
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}


	public function verify_no_run_checklist_items_test() {
		print_ln(__METHOD__." starting.");
		$ct_arr = vModuleDb::get_all_items();
		$this->assertEquals(0, count($ct_arr), "Everything was deleted and table should be empty.");
		print_ln(__METHOD__." complete.");
	}

	public function verify_sample_0_test() {
		print_ln(__METHOD__." starting.");
		$ct0 = $this->create_sample_rci(0);
		$ct_test = new ctg_run_checklist_item();
		$ct_test->setRunChecklist_ref(100);
		$ct_test->setChecklist_item_template_ref(1000);
		$ct_test->setQuestion("question:0".HAPPY_STR);
		$ct_test->setType("type:0".HAPPY_STR);
		$ct_test->setExtra("extra:0".HAPPY_STR);
		$ct_test->setSection_order(10000);
		$ct_test->setSection_index(100000);
		$ct_test->setSection_name("sect_name:0".HAPPY_STR);
		$ct_test->setMeta_status(   META_STATUS_NORMAL);
		$ct_test->setBy_user(         1000000);
		$ct_test->setUpload_datetime(get_current_datetime(true));
		$ct_test->setValue("value:0".HAPPY_STR);
		$ct_test->setComment("comment:0".HAPPY_STR);
		$ct_test->setClient_run_checklist_ref_index( 10000000);
		$ct_test->setClient_checklist_item_template_ref_index( 100000000);
		$ct_test->setClient_index(1000000000);
		$ct_test->setClient_uuid("client_uuid:0".HAPPY_STR);

		$not_same = $this->compare_to_sample($ct0);
		$this->assertTrue(empty($not_same), $not_same);
		$not_same = $this->compare_item($ct0, $ct_test);
		$this->assertTrue(empty($not_same), $not_same);
		print_ln(__METHOD__." complete.");
	}

	public function verify_sample_42_test() {
		print_ln(__METHOD__." starting.");
		$ct0 = $this->create_sample_rci(42);
		$ct_test = new ctg_run_checklist_item();
		$ct_test->setRunChecklist_ref(142);
		$ct_test->setChecklist_item_template_ref(1042);
		$ct_test->setQuestion("question:42".HAPPY_STR);
		$ct_test->setType("type:42".HAPPY_STR);
		$ct_test->setExtra("extra:42".HAPPY_STR);
		$ct_test->setSection_order(10042);
		$ct_test->setSection_index(100042);
		$ct_test->setSection_name("sect_name:42".HAPPY_STR);
		$ct_test->setMeta_status(   META_STATUS_NORMAL);
		$ct_test->setBy_user(         1000042);
		$ct_test->setUpload_datetime(get_current_datetime(true));
		$ct_test->setValue("value:42".HAPPY_STR);
		$ct_test->setComment("comment:42".HAPPY_STR);
		$ct_test->setClient_run_checklist_ref_index( 10000042);
		$ct_test->setClient_checklist_item_template_ref_index( 100000042);
		$ct_test->setClient_index(1000000042);
		$ct_test->setClient_uuid("client_uuid:42".HAPPY_STR);
		
		$not_same = $this->compare_to_sample($ct0, 42);
		$this->assertTrue(empty($not_same), $not_same);
		$not_same = $this->compare_item($ct0, $ct_test);
		$this->assertTrue(empty($not_same), $not_same);
		print_ln(__METHOD__." complete.");
	}

	public function verify_add_sample88_test() {
		print_ln(__METHOD__." starting.");
		//first make sure it is empty
		$this->verify_no_run_checklist_items();
		
		$ct0 = $this->create_sample_rci(88);
		$result = vModuleDb::create_item($ct0);

		$this->assertTrue($result->success, $result->error);
		$this->assertTrue($result->last_insert_id > 0, "Last insert id is not correct");

		//now read sample88
		$ct0_read = vModuleDb::get_item($result->last_insert_id);
		$not_same = $this->compare_item($ct0_read, $ct0);
		$this->assertTrue(empty($not_same), $not_same);
		$ct_arr = vModuleDb::get_all_items();
		$this->assertEquals(1, count($ct_arr), "Expecting only 1 sample here.");

		//now set sample88 to have normal metastatus so it is discovered properly
		vModuleDb::hide_item($result->last_insert_id, META_STATUS_NORMAL);
		$ct_arr = vModuleDb::get_all_items();
		$this->assertEquals(1, count($ct_arr), "Expecting only 1 sample here.");
		print_ln(__METHOD__." complete.");
	}

	public function verify_delete_sample88_test() {
		print_ln(__METHOD__." starting.");
		$ct_arr2 = vModuleDb::get_all_items();
		$this->assertEquals(1, count($ct_arr2), "Expecting only 1 sample here.");
		$ct_sample = $ct_arr2[0];
		vModuleDb::delete_item($ct_sample->getId());
		
		//check after deleting item
		$ct_arr2 = vModuleDb::get_all_items();
		$this->assertEquals(0, count($ct_arr2), "Expecting no samples here.");
		$ct_arr3 = vModuleDb::get_items_for_checklist($ct_sample->getRunChecklist_ref());
		$this->assertEquals(0, count($ct_arr3), "Expecting no samples here.");

		print_ln(__METHOD__." complete.");
	}
	
	
			
	//============-----------> Helper Functions <----------------==============\\
	
	protected function build_module_post(vModule $item) {
		unset($_POST);
		$_POST = array(
			vModuleDb::MOD_ID => $item->id,
			vModuleDb::MOD_ENABLED => $item->enabled,
			vModuleDb::MOD_NAME => $item->name,
			vModuleDb::MOD_STARTFILE => $item->startfile,
			vModuleDb::MOD_TIME_LASTRUN => $item->time_lastrun
		);
	}
		
	protected function clean_up_db() {
		$result = vModuleDb::wipeModules();
		$this->assertTrue($result, "Could not clear database, check error log for details.");
	}

	protected static function create_sample_module($index=0) {
		$item = new vModule();
		
		$item->enabled = $index;
		$item->name = "name:$index".HAPPY_STR;
		$item->startfile  = "startf:$index".HAPPY_STR;
		$item->time_created  = "tc:$index".HAPPY_STR;
		$item->time_lastrun  = "tl:$index".HAPPY_STR;

		return $item;
	}

		
	/**
	 * Returns true if they do not match, empty if they do match
	 * @param type $er
	 */
	private function compare_to_sample($ct, $index = 0) {
		$ct_samp = self::create_sample_module($index);
		return self::compare_item($ct, $ct_samp);
	}

	/**
	 * Returns true if they do not match, empty if they do
	 * @param type $er
	 */
	protected static function compare_item($actual, $desired) {
		$not_same = "";
		//compare passed item to sample
		$not_same .= self::compare_helper($desired->id, $actual->id, vModuleDb::MOD_ID);
		$not_same .= self::compare_helper($desired->enabled, $actual->enabled, vModuleDb::MOD_ENABLED);
		$not_same .= self::compare_helper($desired->name, $actual->name, vModuleDb::MOD_NAME);
		$not_same .= self::compare_helper($desired->startfile, $actual->startfile, vModuleDb::MOD_STARTFILE);
		//can't really test time created, since each object will be created at a different time
		$not_same .= self::compare_helper($desired->time_lastrun, $actual->time_lastrun, vModuleDb::MOD_TIME_LASTRUN);
		return $not_same;
	}

	private static function compare_helper($desired, $actual, $field_name, $prefix = "") {
		$not_same = "";
		if ($desired.$prefix == $actual) {
			//value matches, do nothing
		} else {
			$not_same = "$field_name actual value [$actual] doesn't desired match [$desired$prefix]\n";
		}
		return $not_same;
	}

}
