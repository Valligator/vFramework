<?php

include_once("../models/vRoot.php");
include_once("vTestsHelpers.php");
 
define("HAPPY_STR", '\'"\')(][\'"\'&Ā,ĐĘĶŃÓŚŰāđęķńóśűĂĎĚĹŅŒŠŲăěĺņœšųĄĒĻŇŕŢŸąēĢļňŖţŹĆĕģĽdŌŗźćĖĪľōŘťŻČėīŐřżčĮŁőŞŽįłőŞŽįłőŞŽįłşž\'"\')(][\'"\'&ĀĐĘĶŃÓŚŰāđęķńóśűĂĎĚĹŅŒŠŲăěĺņœšųĄĒĻŇŕŢŸąēĢļňŖţŹĆĕģĽdŌŗźćĖĪľōŘťŻČėīŐřżčĮŁőŞŽįłőŞŽįłőŞŽįłşž');
/**
 * Generated by PHPUnit_SkeletonGenerator on 2013-05-10 at 16:02:30.
 */
class vModConfigDb_Test extends PHPUnit_Framework_TestCase {

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before each test is executed.
	 * 
	 * Assumes the test database was already created by installHelper::install($un, $pw, vDb::getTestDbName());
	 */
	protected function setUp() {
		//use test db - otherwise tests will run on the frameworks normal database
		vDb::loadTestDb();
		//$this->object = new ctg_run_checklist_item;
		print_ln(__METHOD__." starting.");
		$this->clean_up_db();
		print_ln(__METHOD__." complete.");
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after each test is executed.
	 */
	protected function tearDown() {
		
	}


	public function test_no_items_test() {
		print_ln(__METHOD__." starting.");
		$arr = vModConfigDb::getAllConfigs();
		$this->assertEquals(0, count($arr), "Everything should be deleted and table should be empty, but was not.");
		print_ln(__METHOD__." complete.");
	}


	/**
	 * Verify the sample generator is operating as we expect
	 */
	public function test_sample_9_test() {
		print_ln(__METHOD__." starting.");
		$test_item = new vModConfig();
		$index = 9;
  		$test_item->module_ref = $index;
		$test_item->param_keyname = substr("key:$index".HAPPY_STR, 0, vModConfigDb::PARAM_KEYNAME_LENGTH);
		$test_item->param_displayname  = substr("disp:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$test_item->param_type  = substr("t:$index".HAPPY_STR, 0, vModConfigDb::PARAM_TYPE_LENGTH);
		$test_item->param_default_value  = substr("dv:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$test_item->param_desc  = substr("pd:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$test_item->range_high  = 100+$index;
		$test_item->range_low  = 1000+$index; //"tl:$index".HAPPY_STR;
		$test_item->enum_strings  = substr("es:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$test_item->is_required  = $index%10;
		$test_item->is_array  = ($index+1)%10;
		
		$compare_item = self::create_sample_item(9);
		$not_same = $this->compare_item($test_item, $compare_item);
		$this->assertTrue(empty($not_same), $not_same);
		print_ln(__METHOD__." complete.");
	}

	
	/**
	 * Verify we can add a sample to the database and get back the same data
	 */
	public function test_add_sample_test() {
		print_ln(__METHOD__." starting.");
		//first make sure it is empty
		$item_arr = vModConfigDb::getAllConfigs();
		$this->assertEquals(0, count($item_arr), "Expecting only no items here.");
		
		//add item
		$item1 = self::create_sample_item(4);
		$result = vModConfigDb::insert($item1);
		$this->assertTrue(strlen($result) > 0, "Expected a last insert id number, but got '$result' on insert");
		$last_insert_id = $result;
		
		$item_arr = vModConfigDb::getAllConfigs();
		$this->assertEquals(1, count($item_arr), "Expecting only 1 sample here.");

		//verify created sample matches what is recovered from database
		$item_read = vModConfigDb::getModConfigItem($item1->module_ref, $item1->param_keyname);
		//make sure they match
		$not_same = $this->compare_item($item_read, $item1);
		if ($not_same) {
			print_ln("Sample:");
			var_export($item1);
			print_ln("As read:");
			var_export($item_read);
		}
		$this->assertTrue(empty($not_same), $not_same);
		
		print_ln(__METHOD__." complete.");
	}

	public function test_delete_sample_test() {
		print_ln(__METHOD__." starting.");
		$item1 = self::create_sample_item(1);
		$result = vModConfigDb::insert($item1);
		$this->assertTrue(strlen($result) > 0, "Expected a last insert id number, but got '$result' on insert");
		
		$item_arr = vModConfigDb::getAllConfigs();
		$this->assertEquals(1, count($item_arr), "Expecting only 1 sample here.");

		//remove created item
		$del_result = vModConfigDb::delete($item1->module_ref, $item1->param_keyname);
		$this->assertTrue($del_result, "Expected item to be deleted.");
		
		
		//check after deleting item
		$item_arr2 = vModConfigDb::getAllConfigs();
		$this->assertEquals(0, count($item_arr2), "Expecting no samples here.");

		print_ln(__METHOD__." complete.");
	}
	
		public function test_wipe_module_test() {
		print_ln(__METHOD__." starting.");
		$item1 = self::create_sample_item(1);
		$result = vModConfigDb::insert($item1);
		$this->assertTrue(strlen($result) > 0, "Expected a last insert id number, but got '$result' on insert");
		
		$item_arr = vModConfigDb::getAllConfigs();
		$this->assertEquals(1, count($item_arr), "Expecting only 1 sample here.");

		//remove created item
		$del_result = vModConfigDb::wipeModConfigs($item1->module_ref);
		$this->assertTrue($del_result, "Expected item to be deleted.");
		
		
		//check after deleting item
		$item_arr2 = vModConfigDb::getAllConfigs();
		$this->assertEquals(0, count($item_arr2), "Expecting no samples here.");

		print_ln(__METHOD__." complete.");
	}
	
			
	//============-----------> Helper Functions <----------------==============\\

		
	protected function clean_up_db() {
		$result = vModConfigDb::wipeAllConfigs();
		$this->assertTrue($result, "Could not clear database, check error log for details.");
	}

	protected static function create_sample_item($index=0) {
		$item = new vModConfig();
		
		//trim out items longer than are allowed (for comparison purposes)
		//ie. even though PDO will filter out the characters beyond what can be stored,
		//we want to compare what is inserted in the db to what is read from the db
		$item->module_ref = $index;
		$item->param_keyname = substr("key:$index".HAPPY_STR, 0, vModConfigDb::PARAM_KEYNAME_LENGTH);
		$item->param_displayname  = substr("disp:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$item->param_type  = substr("t:$index".HAPPY_STR, 0, vModConfigDb::PARAM_TYPE_LENGTH);
		$item->param_default_value  = substr("dv:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$item->param_desc  = substr("pd:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$item->range_high  = 100+$index;
		$item->range_low  = 1000+$index; //"tl:$index".HAPPY_STR;
		$item->enum_strings  = substr("es:$index".HAPPY_STR, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH);
		$item->is_required  = $index%10;
		$item->is_array  = ($index+1)%10;

		return $item;
	}

		
	/**
	 * Returns true if they do not match, empty if they do match
	 * @param type $er
	 */
	private function compare_to_sample($ct, $index = 0) {
		$ct_samp = self::create_sample_item($index);
		return self::compare_item($ct, $ct_samp);
	}

	/**
	 * Returns true if they do not match, empty if they do
	 * @param type $er
	 */
	protected static function compare_item($actual, $desired) {
		$not_same = "";
		//compare passed item to sample
		$not_same .= self::compare_helper($desired->module_ref, $actual->module_ref, vModConfigDb::MODULE_REF);
		$not_same .= self::compare_helper(substr($desired->param_keyname, 0, vModConfigDb::PARAM_KEYNAME_LENGTH), substr($actual->param_keyname, 0, vModConfigDb::PARAM_KEYNAME_LENGTH), vModConfigDb::PARAM_KEYNAME);
		$not_same .= self::compare_helper(substr($desired->param_displayname, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), substr($actual->param_displayname, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), vModConfigDb::PARAM_DISPLAYNAME);
		$not_same .= self::compare_helper(substr($desired->param_type, 0, vModConfigDb::PARAM_TYPE_LENGTH), substr($actual->param_type, 0, vModConfigDb::PARAM_TYPE_LENGTH), vModConfigDb::PARAM_TYPE);
		$not_same .= self::compare_helper(substr($desired->param_default_value, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), substr($actual->param_default_value, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), vModConfigDb::PARAM_DEFAULT_VALUE);
		$not_same .= self::compare_helper(substr($desired->param_desc, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), substr($actual->param_desc, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), vModConfigDb::PARAM_DESC);
		$not_same .= self::compare_helper($desired->range_high, $actual->range_high, vModConfigDb::RANGE_HIGH);
		$not_same .= self::compare_helper($desired->range_low, $actual->range_low, vModConfigDb::RANGE_LOW);
		$not_same .= self::compare_helper(substr($desired->enum_strings, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), substr($actual->enum_strings, 0, vModConfigDb::PARAM_DISPLAYNAME_LENGTH), vModConfigDb::ENUM_STRINGS);
		$not_same .= self::compare_helper($desired->is_required, $actual->is_required, vModConfigDb::IS_REQUIRED);
		$not_same .= self::compare_helper($desired->is_array, $actual->is_array, vModConfigDb::IS_ARRAY);
		return $not_same;
	}

	
	private static function compare_helper($desired, $actual, $field_name, $prefix = "") {
		$not_same = "";
		if ($desired.$prefix == $actual) {
			//value matches, do nothing
		} else {
			$not_same = "$field_name actual value [$actual] doesn't desired match [$desired$prefix]\n";
		}
		return $not_same;
	}

}
